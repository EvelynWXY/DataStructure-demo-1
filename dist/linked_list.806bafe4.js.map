{"mappings":"AAAA,KAAK,CAAC,UAAU,IAAI,KAAK,GAAK,CAAC;IAC7B,MAAM,CAAC,UAAU,CAAC,KAAK;AACzB,CAAC;AACD,KAAK,CAAC,UAAU,IAAI,KAAI,EAAE,KAAK,GAAK,CAAC;IACnC,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK;IAC7B,GAAG,CAAC,CAAC,GAAG,KAAI;UACL,CAAC,CAAC,IAAI,CACX,CAAC,GAAG,CAAC,CAAC,IAAI;IAEZ,EAA8B,AAA9B,8CAAgD;IAC9B,CAAjB,CAAC,IAAI,GAAG,IAAI;IACb,EAAmB,AAAnB,iBAAmB;IACnB,MAAM,CAAC,IAAI;AACb,CAAC;AACD,KAAK,CAAC,cAAc,IAAI,KAAI,EAAE,IAAI,GAAK,CAAC;IACtC,EAAc,AAAd,YAAc;IACd,GAAG,CAAC,CAAC,GAAG,KAAI;IACZ,GAAG,CAAC,CAAC,GAAG,IAAI;IACZ,EAA+B,AAA/B,iDAAmD;UACxB,CAAnB,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,CAAE,CAAC;QAChC,CAAC,GAAG,CAAC,CAAE,CAAQ,AAAR,EAAkB,AAAlB,gBAAkB;QACf,CAAT,GAAG,CAAC,CAAC,IAAI;IACZ,CAAC;IACD,EAAE,EAAE,CAAC,KAAK,IAAI,EACZ,EAAmD,AAAnD,qGAAuG;IACnD,MAA9C,CAAC,KAAK;SACP,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;QACnB,EAAiB,AAAjB,6CAA+C;QACjB,CAA7B,GAAG,CAAC,CAAC,IAAI;QACV,MAAM,CAAC,CAAC,CAAE,CAA4E,AAA5E,EAAsI,AAAtI,oIAAsI;IACxF,CAAzD,MAAM,CAAC;QACN,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI;QACf,MAAM,CAAC,KAAI,CAAE,CAA4B,AAA5B,EAA4B,AAA5B,kEAA4B;IAC3C,CAAC;AACH,CAAC;AACD,KAAK,CAAC,UAAU,IAAI,KAAK,GAAK,CAAC;IAC7B,MAAM,CAAC,CAAC;QACN,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,IAAI;IACZ,CAAC;AACH,CAAC;AACD,KAAK,CAAC,UAAU,IAAI,KAAI,EAAE,EAAE,GAAK,CAAC;IAChC,GAAG,CAAC,CAAC,GAAG,KAAI;UACL,CAAC,KAAK,IAAI,CAAE,CAAC;QAClB,EAAE,CAAC,CAAC;QACJ,CAAC,GAAG,CAAC,CAAC,IAAI;IACZ,CAAC;AACH,CAAC;AACD,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC,EAAE;AAC1B,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,EAAE,EAAE;AACjC,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,EAAE,EAAE;AACjC,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,EAAE,EAAE;AACjC,EAAwB,AAAxB,sBAAwB;AACxB,EAAsB,AAAtB,oBAAsB;AACtB,EAA+B,AAA/B,6BAA+B;AAC/B,EAAuB,AAAvB,qBAAuB;AACvB,EAAqB,AAArB,mBAAqB;AACrB,UAAU,CAAC,IAAI,GAAG,IAAI,GAAK,CAAC;IAC1B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI;AACvB,CAAC","sources":["src/list.js"],"sourcesContent":["const createList = (value) => {\n  return createNode(value);\n};\nconst appendList = (list, value) => {\n  const node = createNode(value);\n  let x = list;\n  while (x.next) {\n    x = x.next;\n  }\n  //x.next === null 此时 x 是最后一个节点\n  x.next = node;\n  //list.next = node;\n  return node;\n};\nconst removeFromList = (list, node) => {\n  //   debugger;\n  let x = list;\n  let p = node;\n  //如果 node 不在 list 中，x 就可能为 null\n  while (x !== node && x !== null) {\n    p = x; //先把x记下来\n    x = x.next;\n  }\n  if (x === null) {\n    //如果 x 为 null，则不需要删除，直接return，false表示无法删除不在list里的节点\n    return false;\n  } else if (x === p) {\n    //这说明要删除的节点是第一个节点\n    p = x.next;\n    return p; //如果删除的是第一个节点，那么就要把新 list 的头节点 p 返回给外面，即 newList = removeFromList(list,list)\n  } else {\n    p.next = x.next;\n    return list; //如果删除的不是第一个节点，返回原来的 list 即可\n  }\n};\nconst createNode = (value) => {\n  return {\n    data: value,\n    next: null,\n  };\n};\nconst travelList = (list, fn) => {\n  let x = list;\n  while (x !== null) {\n    fn(x);\n    x = x.next;\n  }\n};\nconst list = createList(10);\nconst node2 = appendList(list, 20);\nconst node3 = appendList(list, 30);\nconst node4 = appendList(list, 40);\n// console.log(\"node2\");\n// console.log(node2);\n// removeFromList(list, node3);\n// console.log(\"list\");\n// console.log(list);\ntravelList(list, (node) => {\n  console.log(node.data);\n});\n"],"names":[],"version":3,"file":"linked_list.806bafe4.js.map","sourceRoot":"/__parcel_source_root/"}